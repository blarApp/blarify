name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests
      run: poetry run pytest -v
    
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run Ruff linting
      run: poetry run ruff check blarify
    
    - name: Run codespell
      run: poetry run codespell
    
    - name: Check import sorting
      run: poetry run isort --check-only blarify
    
  type-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run Pyright
      id: pyright
      run: |
        poetry run pyright blarify --outputjson > pyright-results.json || true
        ERROR_COUNT=$(jq -r '.summary.errorCount' pyright-results.json)
        echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "Pyright found $ERROR_COUNT type errors"
    
    - name: Comment PR with type check results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('pyright-results.json', 'utf8'));
          const errorCount = results.summary.errorCount;
          const filesAnalyzed = results.summary.filesAnalyzed;
          
          const body = `## üîç Type Check Results
          
          - **Files analyzed:** ${filesAnalyzed}
          - **Type errors:** ${errorCount}
          
          ${errorCount > 0 ? '‚ö†Ô∏è Type errors found. Working towards zero errors.' : '‚úÖ No type errors found!'}
          
          <details>
          <summary>View detailed results</summary>
          
          \`\`\`json
          ${JSON.stringify(results.summary, null, 2)}
          \`\`\`
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: Upload Pyright Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pyright-results
        path: pyright-results.json